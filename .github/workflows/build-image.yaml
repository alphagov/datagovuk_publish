name: Build and push multi-arch images

on:
  workflow_call:
    inputs:
      buildType:
        description: Decide on what to build
        required: true
        type: string
      gitRef:
        description: Commit, tag or branch name to deploy
        required: false
        type: string
  workflow_dispatch:
    inputs:
      buildType:
        description: Decide on build type
        required: true
        type: choice
        options:
          - build_push
          - build_push_dev
          - build_push_dev_with_gittag
          - build_only
      gitRef:
        description: Commit, tag or branch name to deploy
        required: false
        type: string
  push:
    branches:
      - main

env:
  BUILD_TYPE : ${{ inputs.buildType || 'build_push' }}
  REGISTRY_BASE: ghcr.io/alphagov

jobs:
  configure_builds:
    name: Configure Builds
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.set-matrix.outputs.app_version }}
      runs_on: ${{ steps.set-matrix.outputs.runs_on }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.gitRef || github.ref }}
          show-progress: false
      - id: set-matrix
        run: |
          app_version=$(yq -o=json ".apps.datagovuk_publish" build-config.yaml | jq -r '[. [] | {name: .name, version: .version}] | @json')
          runs_on=$(yq -o=json '.runs_on' build-config.yaml | jq -r '[.[] | {runner_type: .runner_type, arch: .arch}] | @json')
          echo "[DEBUG] app_version: $app_version"
          echo "[DEBUG] runs_on: $runs_on"
          echo "app_version=$app_version" >> "$GITHUB_OUTPUT"
          echo "runs_on=$runs_on" >> "$GITHUB_OUTPUT"

  build_and_push_multiarch_image:
    name: Build datagovuk_publish for ${{ matrix.runs_on.arch }}
    needs: configure_builds
    strategy:
      matrix:
        runs_on: ${{ fromJson(needs.configure_builds.outputs.runs_on) }}
    runs-on: ${{ matrix.runs_on.runner_type }}
    permissions:
      packages: write
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.gitRef || github.ref }}
          show-progress: false

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Calculate Image Tags
        id: calculate-image-tags
        run: |
          CREATED_DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "createdDate=${CREATED_DATE}" >> "$GITHUB_OUTPUT"

      - name: Determine Image Tags
        id: determine-image-tags
        run: |
          buildType="${{ env.BUILD_TYPE }}"

          if [ "$buildType" = "build_push_dev_with_gittag" ]; then
            echo "GH_TAG=${{ inputs.gitRef || github.ref }}" >> $GITHUB_ENV
          else
            echo "GH_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Generate App Image Metadata
        if: ${{ env.BUILD_TYPE == 'build_only' || env.BUILD_TYPE == 'build_push' }}
        uses: docker/metadata-action@v5
        id: app-metadata
        with:
          flavor: |
            latest=false
          images: |
            ${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}
          tags: |
            type=raw,value=${{ env.GH_TAG }}
            type=raw,value=v${{ needs.configure_builds.outputs.app_version.version }}
            type=sha,format=short
            type=sha,priority=100,format=long
          labels: |
            org.opencontainers.image.title=${{ needs.configure_builds.outputs.app_version.name }}
            org.opencontainers.image.authors="GOV.UK Platform Engineering"
            org.opencontainers.image.description="Publish image for data.gov.uk"
            org.opencontainers.image.source="https://github.com/alphagov/datagovuk_publish"
            org.opencontainers.image.version=${{ needs.configure_builds.outputs.app_version.version }}
            org.opencontainers.image.created=${{ steps.calculate-image-tags.outputs.createdDate }}
            org.opencontainers.image.vendor=GDS

      - name: Build App Image
        if: ${{ env.BUILD_TYPE == 'build_only' || env.BUILD_TYPE == 'build_push' }}
        id: build-app-image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          context: .
          platforms: "linux/${{ matrix.runs_on.arch }}"
          load: true
          provenance: false
          labels: ${{ steps.app-metadata.outputs.labels }}
          outputs: |
            type=image,name=${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ needs.configure_builds.outputs.app_version.name }}-app-${{ matrix.runs_on.arch }}
          cache-to: type=gha,scope=${{ needs.configure_builds.outputs.app_version.name }}-app-${{ matrix.runs_on.arch }},mode=max

      - name: Generate Dev Image Metadata
        if: ${{ env.BUILD_TYPE != 'build_push' }}
        uses: docker/metadata-action@v5
        id: dev-metadata
        with:
          flavor: |
            latest=false
          images: |
            ${{ env.REGISTRY_BASE }}/dev.${{ needs.configure_builds.outputs.app_version.name }}
          tags: |
            type=raw,value=${{ env.GH_TAG }}
            type=raw,value=v${{ needs.configure_builds.outputs.app_version.version }}
            type=sha,format=short
            type=sha,priority=100,format=long
          labels: |
            org.opencontainers.image.title=${{ needs.configure_builds.outputs.app_version.name }}-dev
            org.opencontainers.image.authors="GOV.UK Platform Engineering"
            org.opencontainers.image.description="Dev Publish image for data.gov.uk"
            org.opencontainers.image.source="https://github.com/alphagov/datagovuk_publish"
            org.opencontainers.image.version=${{ needs.configure_builds.outputs.app_version.version }}
            org.opencontainers.image.created=${{ steps.calculate-image-tags.outputs.createdDate }}
            org.opencontainers.image.vendor=GDS

      - name: Build Dev Image
        if: ${{ env.BUILD_TYPE != 'build_push' }}
        id: build-dev-image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          context: .
          platforms: "linux/${{ matrix.runs_on.arch }}"
          load: true
          provenance: false
          labels: ${{ steps.app-metadata.outputs.labels }}
          outputs: |
            type=image,name=${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ needs.configure_builds.outputs.app_version.name }}-app-${{ matrix.runs_on.arch }}
          cache-to: type=gha,scope=${{ needs.configure_builds.outputs.app_version.name }}-app-${{ matrix.runs_on.arch }},mode=max

      - name: Export App Image Digests
        if: ${{ env.BUILD_TYPE == 'build_push' }}
        id: export-app-digests
        env:
          DIGEST: "${{ steps.build-app-image.outputs.digest }}"
        run: |
          mkdir -p /tmp/digests/app
          touch "/tmp/digests/app/${DIGEST#sha256:}"

      - name: Export Dev Image Digests
        if: ${{ env.BUILD_TYPE != 'build_only' && env.BUILD_TYPE != 'build_push' }}
        id: export-dev-digests
        env:
          DIGEST: "${{ steps.build-dev-image.outputs.digest }}"
        run: |
          mkdir -p /tmp/digests/dev
          touch "/tmp/digests/dev/${DIGEST#sha256:}"

      - name: Upload Digest Artifacts
        if: ${{ env.BUILD_TYPE != 'build_only' }}
        id: upload-digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ needs.configure_builds.outputs.app_version.name }}-${{ matrix.runs_on.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
          overwrite: true

  create_image_manifest:
    if: ${{ inputs.buildType != 'build_only' }}
    name: Create Image Manifest
    needs:
      - configure_builds
      - build_and_push_multiarch_image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Image Tags
        id: determine-image-tags
        run: |
          buildType="${{ env.BUILD_TYPE }}"

          if [ "$buildType" = "build_push_dev_with_gittag" ]; then
            echo "GH_TAG=${{ inputs.gitRef || github.ref }}" >> $GITHUB_ENV
          else
            echo "GH_TAG=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Download Image Digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ needs.configure_builds.outputs.app_version.name }}-*
          merge-multiple: true

      - name: Generate App Image Metadata
        if: ${{ env.BUILD_TYPE == 'build_only' || env.BUILD_TYPE == 'build_push' }}
        uses: docker/metadata-action@v5
        id: app-metadata
        with:
          flavor: |
            latest=false
          images: |
            ${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}
          tags: |
            type=raw,value=${{ env.GH_TAG }}
            type=raw,value=v${{ needs.configure_builds.outputs.app_version.version }}
            type=sha,format=short
            type=sha,priority=100,format=long
          labels: |
            org.opencontainers.image.title=${{ needs.configure_builds.outputs.app_version.name }}
            org.opencontainers.image.authors="GOV.UK Platform Engineering"
            org.opencontainers.image.description="Publish image for data.gov.uk"
            org.opencontainers.image.source="https://github.com/alphagov/datagovuk_publish"
            org.opencontainers.image.version=${{ needs.configure_builds.outputs.app_version.version }}
            org.opencontainers.image.created=${{ steps.calculate-image-tags.outputs.createdDate }}
            org.opencontainers.image.vendor=GDS

      - name: Create App Image Manifest Lists
        env:
          IMAGEREF_PREFIX: '${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}'
        working-directory: /tmp/digests/app
        run: |
          tag_args=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          printf -v sources "${IMAGEREF_PREFIX}@sha256:%s " *
          # shellcheck disable=SC2086 # Intentional word-splitting on $tag_args and $sources.
          docker buildx imagetools create $tag_args $sources

      - name: Generate Dev Image Metadata
        if: ${{ env.BUILD_TYPE != 'build_push' }}
        uses: docker/metadata-action@v5
        id: dev-metadata
        with:
          flavor: |
            latest=false
          images: |
            ${{ env.REGISTRY_BASE }}/dev.${{ needs.configure_builds.outputs.app_version.name }}
          tags: |
            type=raw,value=${{ env.GH_TAG }}
            type=raw,value=v${{ needs.configure_builds.outputs.app_version.version }}
            type=sha,format=short
            type=sha,priority=100,format=long
          labels: |
            org.opencontainers.image.title=${{ needs.configure_builds.outputs.app_version.name }}-dev
            org.opencontainers.image.authors="GOV.UK Platform Engineering"
            org.opencontainers.image.description="Dev Publish image for data.gov.uk"
            org.opencontainers.image.source="https://github.com/alphagov/datagovuk_publish"
            org.opencontainers.image.version=${{ needs.configure_builds.outputs.app_version.version }}
            org.opencontainers.image.created=${{ steps.calculate-image-tags.outputs.createdDate }}
            org.opencontainers.image.vendor=GDS

      - name: Create Dev Image Manifest Lists
        if: ${{ env.BUILD_TYPE != 'build_push' }}
        env:
          IMAGEREF_PREFIX: '${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}'
        working-directory: /tmp/digests/dev
        run: |
          tag_args=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          printf -v sources "${IMAGEREF_PREFIX}@sha256:%s " *
          # shellcheck disable=SC2086 # Intentional word-splitting on $tag_args and $sources.
          docker buildx imagetools create $tag_args $sources

      - name: Inspect App Images
        env:
          IMAGEREF: '${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}:${{ steps.app-metadata.outputs.version }}'
        run: |
          docker buildx imagetools inspect "$IMAGEREF"

      - name: Inspect Base Images
        if: ${{ env.BUILD_TYPE != 'build_push' }}
        env:
          IMAGEREF: '${{ env.REGISTRY_BASE }}/${{ needs.configure_builds.outputs.app_version.name }}:${{ steps.dev-metadata.outputs.version }}'
        run: |
          docker buildx imagetools inspect "$IMAGEREF"